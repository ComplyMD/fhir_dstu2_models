<<%= (is_lowercase) ? name.downcase : name %>
<%if model.xmlId%> id="<%= model.xmlId%>"<%end%>
>
    <%== render :template => 'element', :locals => {model: model, is_resource: false} %>
    <%- if !model.valueBoolean().nil? -%><valueBoolean value="<%= model.valueBoolean %>"<%- if model.has_primitive_extension?('valueBoolean') -%>><%== model.get_primitive_extension('valueBoolean').to_xml(is_root: false, is_lowercase: true)  %></valueBoolean><%- else -%>/><%- end -%><%- end -%>
    <%- if !model.valueDecimal().nil? -%><valueDecimal value="<%= model.valueDecimal %>"<%- if model.has_primitive_extension?('valueDecimal') -%>><%== model.get_primitive_extension('valueDecimal').to_xml(is_root: false, is_lowercase: true)  %></valueDecimal><%- else -%>/><%- end -%><%- end -%>
    <%- if !model.valueInteger().nil? -%><valueInteger value="<%= model.valueInteger %>"<%- if model.has_primitive_extension?('valueInteger') -%>><%== model.get_primitive_extension('valueInteger').to_xml(is_root: false, is_lowercase: true)  %></valueInteger><%- else -%>/><%- end -%><%- end -%>
    <%- if !model.valueDate.nil? -%><%- if (!model.valueDate.match(/\A[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?\Z/).nil?) -%><valueDate value="<%= model.valueDate %>"<%- if model.has_primitive_extension?('valueDate') -%>><%== model.get_primitive_extension('valueDate').to_xml(is_root: false, is_lowercase: true)  %></valueDate><%- else -%>/><%- end -%><%- end -%><%- end -%>
    <%- if !model.valueDateTime.nil? -%><%- if (!model.valueDateTime.match(/\A[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?)?)?)?\Z/).nil?) -%><valueDateTime value="<%= model.valueDateTime %>"<%- if model.has_primitive_extension?('valueDateTime') -%>><%== model.get_primitive_extension('valueDateTime').to_xml(is_root: false, is_lowercase: true)  %></valueDateTime><%- else -%>/><%- end -%><%- end -%><%- end -%>
    <%- if !model.valueInstant.nil? -%><%- if (!model.valueInstant.match(/\A[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))))\Z/).nil?) -%><valueInstant value="<%= model.valueInstant %>"<%- if model.has_primitive_extension?('valueInstant') -%>><%== model.get_primitive_extension('valueInstant').to_xml(is_root: false, is_lowercase: true)  %></valueInstant><%- else -%>/><%- end -%><%- end -%><%- end -%>
    <%- if !model.valueTime.nil? -%><%- if (!model.valueTime.match(/\A([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\.[0-9]+)?\Z/).nil?) -%><valueTime value="<%= model.valueTime %>"<%- if model.has_primitive_extension?('valueTime') -%>><%== model.get_primitive_extension('valueTime').to_xml(is_root: false, is_lowercase: true)  %></valueTime><%- else -%>/><%- end -%><%- end -%><%- end -%>
    <%- if !model.valueString().nil? -%><valueString value="<%= model.valueString %>"<%- if model.has_primitive_extension?('valueString') -%>><%== model.get_primitive_extension('valueString').to_xml(is_root: false, is_lowercase: true)  %></valueString><%- else -%>/><%- end -%><%- end -%>
    <%- if !model.valueUri().nil? -%><valueUri value="<%= model.valueUri %>"<%- if model.has_primitive_extension?('valueUri') -%>><%== model.get_primitive_extension('valueUri').to_xml(is_root: false, is_lowercase: true)  %></valueUri><%- else -%>/><%- end -%><%- end -%>
    <%- if !model.valueAttachment().nil? -%><%== render :template => 'attachment', :locals => {name: 'valueAttachment', model: model.valueAttachment()} %><%- end -%>
    <%- if !model.valueCoding().nil? -%><%== render :template => 'coding', :locals => {name: 'valueCoding', model: model.valueCoding()} %><%- end -%>
    <%- if !model.valueQuantity().nil? -%><%== render :template => 'quantity', :locals => {name: 'valueQuantity', model: model.valueQuantity()} %><%- end -%>
    <%- if !model.valueReference().nil? -%><%== render :template => 'reference', :locals => {name: 'valueReference', model: model.valueReference()} %><%- end -%>
    <%- if (!model.group().nil? && !model.group.empty?) -%><%- model.group().each do |element| -%><%== render :template => 'questionnaireresponse_groupcomponent', :locals => {name: 'group', model: element} %><%- end -%><%- end -%>
</<%= (is_lowercase) ? name.downcase : name %>>
