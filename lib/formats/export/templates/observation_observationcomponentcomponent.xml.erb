<<%= (is_lowercase) ? name.downcase : name %>
<%if model.xmlId%> id="<%= model.xmlId%>"<%end%>
>
    <%== render :template => 'element', :locals => {model: model, is_resource: false} %>
    <%- if !model.code().nil? -%><%== render :template => 'codeableconcept', :locals => {name: 'code', model: model.code()} %><%- end -%>
    <%- if !model.valueQuantity().nil? -%><%== render :template => 'quantity', :locals => {name: 'valueQuantity', model: model.valueQuantity()} %><%- end -%>
    <%- if !model.valueCodeableConcept().nil? -%><%== render :template => 'codeableconcept', :locals => {name: 'valueCodeableConcept', model: model.valueCodeableConcept()} %><%- end -%>
    <%- if !model.valueString().nil? -%><valueString value="<%= model.valueString %>"<%- if model.has_primitive_extension?('valueString') -%>><%== model.get_primitive_extension('valueString').to_xml(is_root: false, is_lowercase: true)  %></valueString><%- else -%>/><%- end -%><%- end -%>
    <%- if !model.valueRange().nil? -%><%== render :template => 'range', :locals => {name: 'valueRange', model: model.valueRange()} %><%- end -%>
    <%- if !model.valueRatio().nil? -%><%== render :template => 'ratio', :locals => {name: 'valueRatio', model: model.valueRatio()} %><%- end -%>
    <%- if !model.valueSampledData().nil? -%><%== render :template => 'sampleddata', :locals => {name: 'valueSampledData', model: model.valueSampledData()} %><%- end -%>
    <%- if !model.valueAttachment().nil? -%><%== render :template => 'attachment', :locals => {name: 'valueAttachment', model: model.valueAttachment()} %><%- end -%>
    <%- if !model.valueTime.nil? -%><%- if (!model.valueTime.match(/\A([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\.[0-9]+)?\Z/).nil?) -%><valueTime value="<%= model.valueTime %>"<%- if model.has_primitive_extension?('valueTime') -%>><%== model.get_primitive_extension('valueTime').to_xml(is_root: false, is_lowercase: true)  %></valueTime><%- else -%>/><%- end -%><%- end -%><%- end -%>
    <%- if !model.valueDateTime.nil? -%><%- if (!model.valueDateTime.match(/\A[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?)?)?)?\Z/).nil?) -%><valueDateTime value="<%= model.valueDateTime %>"<%- if model.has_primitive_extension?('valueDateTime') -%>><%== model.get_primitive_extension('valueDateTime').to_xml(is_root: false, is_lowercase: true)  %></valueDateTime><%- else -%>/><%- end -%><%- end -%><%- end -%>
    <%- if !model.valuePeriod().nil? -%><%== render :template => 'period', :locals => {name: 'valuePeriod', model: model.valuePeriod()} %><%- end -%>
    <%- if !model.dataAbsentReason().nil? -%><%== render :template => 'codeableconcept', :locals => {name: 'dataAbsentReason', model: model.dataAbsentReason()} %><%- end -%>
    <%- if (!model.referenceRange().nil? && !model.referenceRange.empty?) -%><%- model.referenceRange().each do |element| -%><%== render :template => 'observation_observationreferencerangecomponent', :locals => {name: 'referenceRange', model: element} %><%- end -%><%- end -%>
</<%= (is_lowercase) ? name.downcase : name %>>
