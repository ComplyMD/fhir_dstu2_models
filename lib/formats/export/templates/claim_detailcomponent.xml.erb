<<%= (is_lowercase) ? name.downcase : name %>
<%if model.xmlId%> id="<%= model.xmlId%>"<%end%>
>
    <%== render :template => 'element', :locals => {model: model, is_resource: false} %>
    <%- if !model.sequence().nil? -%><sequence value="<%= model.sequence %>"<%- if model.has_primitive_extension?('sequence') -%>><%== model.get_primitive_extension('sequence').to_xml(is_root: false, is_lowercase: true)  %></sequence><%- else -%>/><%- end -%><%- end -%>
    <%- if !model.fhirType().nil? -%><%== render :template => 'coding', :locals => {name: 'type', model: model.fhirType()} %><%- end -%>
    <%- if !model.service().nil? -%><%== render :template => 'coding', :locals => {name: 'service', model: model.service()} %><%- end -%>
    <%- if !model.quantity().nil? -%><%== render :template => 'quantity', :locals => {name: 'quantity', model: model.quantity()} %><%- end -%>
    <%- if !model.unitPrice().nil? -%><%== render :template => 'quantity', :locals => {name: 'unitPrice', model: model.unitPrice()} %><%- end -%>
    <%- if !model.factor().nil? -%><factor value="<%= model.factor %>"<%- if model.has_primitive_extension?('factor') -%>><%== model.get_primitive_extension('factor').to_xml(is_root: false, is_lowercase: true)  %></factor><%- else -%>/><%- end -%><%- end -%>
    <%- if !model.points().nil? -%><points value="<%= model.points %>"<%- if model.has_primitive_extension?('points') -%>><%== model.get_primitive_extension('points').to_xml(is_root: false, is_lowercase: true)  %></points><%- else -%>/><%- end -%><%- end -%>
    <%- if !model.net().nil? -%><%== render :template => 'quantity', :locals => {name: 'net', model: model.net()} %><%- end -%>
    <%- if !model.udi().nil? -%><%== render :template => 'coding', :locals => {name: 'udi', model: model.udi()} %><%- end -%>
    <%- if (!model.subDetail().nil? && !model.subDetail.empty?) -%><%- model.subDetail().each do |element| -%><%== render :template => 'claim_subdetailcomponent', :locals => {name: 'subDetail', model: element} %><%- end -%><%- end -%>
</<%= (is_lowercase) ? name.downcase : name %>>
